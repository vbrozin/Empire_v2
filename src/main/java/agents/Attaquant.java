/**
* model/Attaquant.java
*
* File generated from the Attaquant uml Class
* Generated by the Acceleo UML 2.1 to Java generator module (Obeo)
* $ Date : 2/26/14 2:00:36 PM (February 26, 2014) $
*/
package agents;

// Start of user code to add imports for Attaquant


// End of user code

import environment.Carte;
import environment.Case;
import java.awt.Point;

/**
* Description of the class Attaquant.
*
*/

public class Attaquant extends Unite implements IUniteLibre {
    private int vitesse;
    private Carte carte;

    // Start of user code to add fields for Attaquant

    // End of user code

    /**
     * Constructor.
     */
    public Attaquant(Base b, int pv, int pt, int pa, int t, int va, double po, Case<Point> c, Carte ca, int v) {
    // Start of user code for constructor Unite
    super(b, pv, pt, pa, t, va, po, c, ca);
    this.vitesse = v;
    // End of user code
    }

    /**
     * Return vitesse.
     * @return vitesse
     */
    public int getVitesse() {
        return vitesse;
    }

    /**
     * Set a value to attribute vitesse.
     * @param vitesse
     */
    public void setVitesse(int vitesse) {
        this.vitesse = vitesse;
    }

    /**
     * Description of the method seDeplacer.
    *
    * @param caseLibre
    */
    @Override
    public void seDeplacer(Case caseLibre) {
        if(caseLibre != null && caseLibre.estLibre()) {
            maCase.retirerUnite(this);
            maCase = caseLibre;
            maCase.ajouterUnite(this);
        }
    }


    /**
     * Description of the method suivreUnite.
     *
     * @param cible
     */
    public void suivreUnite(IAgent cible) {
        int cibleX = (int) cible.getCase().getIndex().getX();
        int cibleY = (int) cible.getCase().getIndex().getY();
        int myX = (int) maCase.getIndex().getX();
        int myY = (int) maCase.getIndex().getY();
        int deltaX = cibleX-myX;
        int deltaY = cibleY-myY;
        if(Math.abs(deltaX) > Math.abs(deltaY)) {
            if(deltaX < 0)
                //deplacement case gauche
                seDeplacer(map.getCase(new Point(myX-1,myY)));
            else
                //deplacement case droite
                seDeplacer(map.getCase(new Point(myX+1,myY)));
        }
        else {
            if(deltaY < 0)
                //deplacement case bas
                seDeplacer(map.getCase(new Point(myY-1,myX)));
            else
                //deplacement case haut
                seDeplacer(map.getCase(new Point(myY+1,myX)));
        }
    }

    /**
     * Description of the method reagir.
     * On cherche une unite ennemie dans la portee de vision, si il y en a une,
     * on verifit la distance est on attaque ou on se deplace vers l'unite ennemie selon le cas.
     */
    public void reagir() {
        IAgent ennemie = calculerUnitePlusProche();
        if(ennemie != null) {
            if(calculerDistance(ennemie) <= porteeAttaque)
                attaquer(ennemie);
            else
                suivreUnite(ennemie);
        }
    }

    /**
     * Description of the method reagir.
     * On cherche une unite ennemie dans la portee de vision, si il y en a une,
     * on verifit la distance est on attaque ou on se deplace vers l'unite ennemie selon le cas.
     */
    public boolean reagir2() {
        IAgent ennemie = calculerUnitePlusProche();
        boolean b = false;
        if(ennemie != null) {
            if(calculerDistance(ennemie) <= porteeAttaque)
                return true;
            else
                return false;
        }
        return b;
    }


    // Start of user code to add methods for Attaquant




    // End of user code
}