/**
* model/Recolteur.java
*
* File generated from the Recolteur uml Class
* Generated by the Acceleo UML 2.1 to Java generator module (Obeo)
* $ Date : 2/26/14 2:00:36 PM (February 26, 2014) $
*/
package agents;

// Start of user code to add imports for Recolteur


// End of user code
import java.awt.Point;
import environment.Carte;
import environment.Case;
import environment.Ressource;
import environment.TypeRessource;

import java.util.Iterator;

/**
* Description of the class Recolteur.
*
*/

public class Recolteur extends Unite implements IUniteLibre {
    private int capaciteTotal;
    private int bois;
    private int nourriture;

    // Start of user code to add fields for Recolteur

    // End of user code

    /**
     * Constructor.
     */
    public Recolteur(Base b, int pv, int pt, int pa, double po, Case c, Carte ca,
                     int capa) {
        // Start of user code for constructor Unite
        super(b, pv, pt, pa, po, c, ca);
        this.capaciteTotal = capa;
        this.bois = 0;
        this.nourriture = 0;
        b.addRecolteurs(this);
        // End of user code
    }




    /**
     * Description of the method seDeplacer.
     *
     * @param caseLibre
     */
    @Override
    public void seDeplacer(Case caseLibre) {
        getCase().retirerUnite(this);
        setCase(caseLibre);
        getCase().ajouterUnite(this);
    }


    /**
     * Description of the method reagir.
     * Si l'unite n'est pas pleine, elle va essayer de recolter sinon elle rentre à la base
     */
    public void reagir(Case<Point> ressource) {
        if(bois + nourriture < capaciteTotal)
            reagirRecolte(ressource);
        else
            revenirBase();
    }

    public void subirDegats(int degats) {
        super.subirDegats(degats);
        if(getPvRestant() == 0) {
            getBase().removeRecolteurs(this);
        }
    }

    /**
     * Description of the method reagirRecolte.
     * Quand l'unite n'est pas pleine, soit elle recolte soit elle se dirige vers un point de recolte
     *
     *@param caseRessource
     */
    private void reagirRecolte(Case<Point> caseRessource) {
        // Start of user code for method reagirRecolte
        if(calculerDistance(caseRessource) <= porteeAction)
            recolter(caseRessource.getRessource());
        else {
            Case<Point> next = maBase.calculerChemin(getCase(), caseRessource);
            seDeplacer(next);
        }
        // End of user code
    }

    /**
     * Description of the method recolter.
     *
     * @param ressource
     */
    private void recolter(Ressource ressource) {
        // Start of user code for method recolter
        // S'il ne reste plus qu'une petite quantite, on vide la ressource
        int n = ressource.getQuantite();
        // Sinon, on récolte normalement à une certaine vitesse
        if (n > pointAction)
            n = pointAction;


        if(ressource.getTypeRessource() == TypeRessource.BOIS)
            if(nourriture + bois + n > capaciteTotal)
                bois = capaciteTotal - nourriture;
            else
                bois += n;
        else
        if(nourriture + bois + n > capaciteTotal)
            nourriture = capaciteTotal - bois;
        else
            nourriture += n;

        // On retire la quantite de ressource récoltée
        ressource.decrementerQuantite(n);
        // End of user code
    }

    /**
     * Description of the method revenirBase.
     * Si l'unité est à porter de la base, on dépose les ressource
     * Sinon, elle se dirige vers la base
     *
     */
    private void revenirBase() {
        // Start of user code for method revenirBase
        if(calculerDistance(maBase.getCase()) <= porteeAction)
            deposer();
        else {
            Case<Point> next = maBase.calculerChemin(getCase(), maBase.getCase());
            seDeplacer(next);
        }
        // End of user code
    }

    /**
     * Description of the method deposer.
     *L'unité dépose les ressources dans la base
     */
    private void deposer() {
        // Start of user code for method deposer
        maBase.incrementerRessource(bois, nourriture);
        bois = nourriture = 0;
        // End of user code
    }



    // Start of user code to add methods for Recolteur

    // End of user code
}