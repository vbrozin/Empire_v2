/**
* model/Recolteur.java
*
* File generated from the Recolteur uml Class
* Generated by the Acceleo UML 2.1 to Java generator module (Obeo)
* $ Date : 2/26/14 2:00:36 PM (February 26, 2014) $
*/
package agents;

// Start of user code to add imports for Recolteur


// End of user code

import environment.Carte;
import environment.Case;
import environment.Ressource;
import environment.TypeRessource;

/**
* Description of the class Recolteur.
*
*/

public class Recolteur extends Unite implements IUniteLibre {
    private int capaciteTotal;
    private int vitesseDeplacement;
    private int vitesseRecolte;
    private int bois;
    private int nourriture;
    private double porteeRecolte;

    // Start of user code to add fields for Recolteur

    // End of user code

    /**
     * Constructor.
     */
    public Recolteur(Base b, int pv, int pt, int pa, int t, int va, double po, Case c, Carte ca,
                     int capa, int vitD, int vitR, double poR) {
        // Start of user code for constructor Unite
        super(b, pv, pt, pa, t, va, po, c, ca);
        this.capaciteTotal = capa;
        this.vitesseDeplacement = vitD;
        this.vitesseRecolte = vitR;
        this.porteeRecolte = poR;
        // End of user code
    }

    /**
     * Return capaciteTotal.
     * @return capaciteTotal
     */
    public int getCapaciteTotal() {
        return capaciteTotal;
    }

    /**
     * Set a value to attribute capaciteTotal.
     * @param capaciteTotal
     */
    public void setCapaciteTotal(int capaciteTotal) {
        this.capaciteTotal = capaciteTotal;
    }

    /**
     * Return vitesseDeplacement.
     * @return vitesseDeplacement
     */
    public int getVitesseDeplacement() {
        return vitesseDeplacement;
    }

    /**
     * Set a value to attribute vitesseDeplacement.
     * @param vitesseDeplacement
     */
    public void setVitesseDeplacement(int vitesseDeplacement) {
        this.vitesseDeplacement = vitesseDeplacement;
    }

    /**
     * Return vitesseRecolte.
     * @return vitesseRecolte
     */
    public int getVitesseRecolte() {
        return vitesseRecolte;
    }

    /**
     * Set a value to attribute vitesseRecolte.
     * @param vitesseRecolte
     */
    public void setVitesseRecolte(int vitesseRecolte) {
        this.vitesseRecolte = vitesseRecolte;
    }

    /**
     * Return bois.
     * @return bois
     */
    public int getBois() {
        return bois;
    }

    /**
     * Set a value to attribute bois.
     * @param bois
     */
    public void setBois(int bois) {
        this.bois = bois;
    }

    /**
     * Return nourriture.
     * @return nourriture
     */
    public int getNourriture() {
        return nourriture;
    }

    /**
     * Set a value to attribute nourriture.
     * @param nourriture
     */
    public void setNourriture(int nourriture) {
        this.nourriture = nourriture;
    }

    /**
     * Return porteeRecolte.
     * @return porteeRecolte
     */
    public double getPorteeRecolte() {
        return porteeRecolte;
    }

    /**
     * Set a value to attribute porteeRecolte.
     * @param porteeRecolte
     */
    public void setPorteeRecolte(double porteeRecolte) {
        this.porteeRecolte = porteeRecolte;
    }


    /**
     * Description of the method recolter.
     *
     * @param ressource
     */
    public void recolter(Ressource ressource) {
        // Start of user code for method recolter
        // S'il ne reste plus qu'une petite quantite, on vide la ressource
        int n = ressource.getQuantite();
        // Sinon, on récolte normalement à une certaine vitesse
        if (n > vitesseRecolte)
            n = vitesseRecolte;


        if(ressource.getTypeRessource() == TypeRessource.BOIS)
            if(nourriture + bois + n > capaciteTotal)
                bois = capaciteTotal - nourriture;
            else
                bois += n;
        else
            if(nourriture + bois + n > capaciteTotal)
                nourriture = capaciteTotal - bois;
            else
                nourriture += n;

        // On retire la quantite de ressource récoltée
        ressource.decrementerQuantite(n);
        // End of user code
    }

    /**
     * Description of the method revenirBase.
     *
     */
    public void revenirBase() {
        // Start of user code for method revenirBase

        // End of user code
    }

    /**
     * Description of the method deposer.
     *
     */
    public void deposer() {
        // Start of user code for method deposer
        maBase.incrementerRessource(bois, nourriture);
        bois = nourriture = 0;
        // End of user code
    }

    /**
     * Description of the method reagirRecolte.
     *
     */
    public void reagirRecolte() {
        // Start of user code for method reagirRecolte

        // End of user code
    }

    /**
     * Description of the method seDeplacer.
     *
     * @param caseLibre
     */
    @Override
    public void seDeplacer(Case caseLibre) {
        maCase.retirerUnite(this);
        maCase = caseLibre;
        maCase.ajouterUnite(this);
    }
    /**
     * Description of the method suivreUnite.
     *
     * @param cible
     */
    public void suivreUnite(IAgent cible) {

    }

    /**
     * Description of the method reagir.
     */
    public void reagir() {

    }

    // Start of user code to add methods for Recolteur

    // End of user code
}